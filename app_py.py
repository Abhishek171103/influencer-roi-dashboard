# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/195DDUNxjcs1B-NxOyFArtEsk7KEMLgCk
"""

!pip install streamlit pyngrok pandas --quiet

code = '''

import streamlit as st
import pandas as pd

#Cache the function so data loads only once (faster performance)
@st.cache_data
def load_data():
    influencers = pd.read_csv("influencers.csv")
    posts = pd.read_csv("posts.csv")
    tracking = pd.read_csv("tracking_data.csv")
    payouts = pd.read_csv("payouts.csv")
    return influencers, posts, tracking, payouts

influencers, posts, tracking, payouts = load_data()

# Title for the web app
st.title("üìà Influencer Campaign ROI Dashboard")

with st.sidebar:
    st.header("üîç Filters")
    selected_platform = st.multiselect("Platform", influencers["platform"].unique())      # Platform multiselect (Instagram, YouTube, etc.)
    selected_category = st.multiselect("Category", influencers["category"].unique())      # Category multiselect (Fitness, Lifestyle, etc.)

    # Filter influencers based on platform & category
    filtered_influencers = influencers
    if selected_platform:
        filtered_influencers = filtered_influencers[filtered_influencers["platform"].isin(selected_platform)]
    if selected_category:
        filtered_influencers = filtered_influencers[filtered_influencers["category"].isin(selected_category)]

    # Filter IDs to apply across all datasets
    filtered_ids = filtered_influencers["id"].tolist()
    posts = posts[posts["influencer_id"].isin(filtered_ids)]
    tracking = tracking[tracking["influencer_id"].isin(filtered_ids)]
    payouts = payouts[payouts["influencer_id"].isin(filtered_ids)]

merged = tracking.merge(payouts, on="influencer_id", how="left")       # Merge tracking data with payout info
merged["ROAS"] = merged["revenue"] / merged["total_payout"]            # ROAS = Revenue / Payout

st.subheader("üìä Overall Campaign Summary")

# 4 Columns for revenue, orders, spend, and average ROAS
col1, col2, col3, col4 = st.columns(4)
col1.metric("Total Revenue", f"‚Çπ{int(merged['revenue'].sum())}")
col2.metric("Total Orders", int(merged['orders'].sum()))
col3.metric("Total Spend", f"‚Çπ{int(merged['total_payout'].sum())}")
col4.metric("Avg ROAS", round(merged['ROAS'].mean(), 2))

st.subheader("üåü Top Influencers by Revenue")

# Group data by influencer and calculate total metrics
top_inf = merged.groupby('influencer_id').agg({
    'revenue': 'sum', 'orders': 'sum', 'total_payout': 'sum'
}).reset_index()


top_inf['ROAS'] = top_inf['revenue'] / top_inf['total_payout']                # Recalculate ROAS after aggregation
top_inf = top_inf.merge(influencers, left_on='influencer_id', right_on='id')  # Merge to get influencer name, platform, category
top_inf = top_inf.sort_values(by='revenue', ascending=False)                  # Sort by revenue (highest first)
st.dataframe(top_inf[['name', 'platform', 'category', 'revenue', 'orders', 'total_payout', 'ROAS']])        # Show final table

st.subheader("‚ö†Ô∏è Influencers with ROAS < 1")
low_perf = top_inf[top_inf['ROAS'] < 1]           # Filter for underperforming influencers
st.dataframe(low_perf[['name', 'platform', 'category', 'revenue', 'orders', 'total_payout', 'ROAS']])       # Show table of low performers
'''

with open("app.py", "w") as f:
    f.write(code)

from pyngrok import ngrok

ngrok.set_auth_token("30BL45CkHz62PVXCluPbUpRFSsC_7gtAjTmSLP6KP8X7qGt31")

public_url = ngrok.connect(8501)
print("Streamlit App URL:", public_url)